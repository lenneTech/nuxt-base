import {CoreHealthCheckResult, FindAndCountUsersResult, SortInput, FilterInput, User, Meta, FileInfo, FindAndCountEventsResult, Event, FindAndCountFaqsResult, Faq, FindAndCountSkillsResult, Skill, CoreAuthModel, Auth, AuthSignInInput, AuthSignUpInput, UserCreateInput, UserInput, EventCreateInput, EventInput, FaqCreateInput, FaqInput, SkillCreateInput, SkillInput} from "./default"
import type { InputFields } from '#imports';

import { gqlQuery, gqlMutation, gqlSubscription } from '#imports';

import type { AsyncData } from 'nuxt/dist/app/composables';

import { UseMutationReturn, UseSubscriptionReturn } from '@vue/apollo-composable';

export const useHealthCheckQuery = ( fields?: InputFields<CoreHealthCheckResult>[] | null, log?: boolean): Promise<AsyncData<{healthCheck: CoreHealthCheckResult}, any>> => gqlQuery<{healthCheck: CoreHealthCheckResult}>('healthCheck', { fields, log})
export const useFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, log?: boolean): Promise<AsyncData<{findAndCountUsers: FindAndCountUsersResult}, any>> => gqlQuery<{findAndCountUsers: FindAndCountUsersResult}>('findAndCountUsers', {variables: variables, fields, log})
export const useFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User[]>[] | null, log?: boolean): Promise<AsyncData<{findUsers: User[]}, any>> => gqlQuery<{findUsers: User[]}>('findUsers', {variables: variables, fields, log})
export const useGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<AsyncData<{getUser: User}, any>> => gqlQuery<{getUser: User}>('getUser', {variables: variables, fields, log})
export const useGetProfileQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<AsyncData<{getProfile: User}, any>> => gqlQuery<{getProfile: User}>('getProfile', {variables: variables, fields, log})
export const useGetVerifiedStateQuery = (variables: { token: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<AsyncData<{getVerifiedState: boolean}, any>> => gqlQuery<{getVerifiedState: boolean}>('getVerifiedState', {variables: variables, fields, log})
export const useRequestPasswordResetMailQuery = (variables: { email: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<AsyncData<{requestPasswordResetMail: boolean}, any>> => gqlQuery<{requestPasswordResetMail: boolean}>('requestPasswordResetMail', {variables: variables, fields, log})
export const useGetMetaQuery = ( fields?: InputFields<Meta>[] | null, log?: boolean): Promise<AsyncData<{getMeta: Meta}, any>> => gqlQuery<{getMeta: Meta}>('getMeta', { fields, log})
export const useGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<AsyncData<{getFileInfo: FileInfo}, any>> => gqlQuery<{getFileInfo: FileInfo}>('getFileInfo', {variables: variables, fields, log})
export const useFindAndCountEventsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountEventsResult>[] | null, log?: boolean): Promise<AsyncData<{findAndCountEvents: FindAndCountEventsResult}, any>> => gqlQuery<{findAndCountEvents: FindAndCountEventsResult}>('findAndCountEvents', {variables: variables, fields, log})
export const useFindEventsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Event[]>[] | null, log?: boolean): Promise<AsyncData<{findEvents: Event[]}, any>> => gqlQuery<{findEvents: Event[]}>('findEvents', {variables: variables, fields, log})
export const useGetEventQuery = (variables: { id: string }, fields?: InputFields<Event>[] | null, log?: boolean): Promise<AsyncData<{getEvent: Event}, any>> => gqlQuery<{getEvent: Event}>('getEvent', {variables: variables, fields, log})
export const useFindAndCountFaqsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountFaqsResult>[] | null, log?: boolean): Promise<AsyncData<{findAndCountFaqs: FindAndCountFaqsResult}, any>> => gqlQuery<{findAndCountFaqs: FindAndCountFaqsResult}>('findAndCountFaqs', {variables: variables, fields, log})
export const useFindFaqsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Faq[]>[] | null, log?: boolean): Promise<AsyncData<{findFaqs: Faq[]}, any>> => gqlQuery<{findFaqs: Faq[]}>('findFaqs', {variables: variables, fields, log})
export const useGetFaqQuery = (variables: { id: string }, fields?: InputFields<Faq>[] | null, log?: boolean): Promise<AsyncData<{getFaq: Faq}, any>> => gqlQuery<{getFaq: Faq}>('getFaq', {variables: variables, fields, log})
export const useFindAndCountSkillsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountSkillsResult>[] | null, log?: boolean): Promise<AsyncData<{findAndCountSkills: FindAndCountSkillsResult}, any>> => gqlQuery<{findAndCountSkills: FindAndCountSkillsResult}>('findAndCountSkills', {variables: variables, fields, log})
export const useFindSkillsQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Skill[]>[] | null, log?: boolean): Promise<AsyncData<{findSkills: Skill[]}, any>> => gqlQuery<{findSkills: Skill[]}>('findSkills', {variables: variables, fields, log})
export const useGetSkillQuery = (variables: { id: string }, fields?: InputFields<Skill>[] | null, log?: boolean): Promise<AsyncData<{getSkill: Skill}, any>> => gqlQuery<{getSkill: Skill}>('getSkill', {variables: variables, fields, log})
export const useLogoutMutation = (variables: { allDevices?: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{logout: boolean}, any>> => gqlMutation<{logout: boolean}>('logout', {variables: variables, fields, log})
export const useRefreshTokenMutation = ( fields?: InputFields<CoreAuthModel>[] | null, log?: boolean): Promise<UseMutationReturn<{refreshToken: CoreAuthModel}, any>> => gqlMutation<{refreshToken: CoreAuthModel}>('refreshToken', { fields, log})
export const useSignInMutation = (variables: { input: AuthSignInInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<UseMutationReturn<{signIn: Auth}, any>> => gqlMutation<{signIn: Auth}>('signIn', {variables: variables, fields, log})
export const useSignUpMutation = (variables: { input: AuthSignUpInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<UseMutationReturn<{signUp: Auth}, any>> => gqlMutation<{signUp: Auth}>('signUp', {variables: variables, fields, log})
export const useCreateUserMutation = (variables: { input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{createUser: User}, any>> => gqlMutation<{createUser: User}>('createUser', {variables: variables, fields, log})
export const useDeleteUserMutation = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteUser: User}, any>> => gqlMutation<{deleteUser: User}>('deleteUser', {variables: variables, fields, log})
export const useResetPasswordMutation = (variables: { token: string, password: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{resetPassword: boolean}, any>> => gqlMutation<{resetPassword: boolean}>('resetPassword', {variables: variables, fields, log})
export const useUpdateUserMutation = (variables: { input: UserInput, id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<UseMutationReturn<{updateUser: User}, any>> => gqlMutation<{updateUser: User}>('updateUser', {variables: variables, fields, log})
export const useVerifyUserMutation = (variables: { token: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{verifyUser: boolean}, any>> => gqlMutation<{verifyUser: boolean}>('verifyUser', {variables: variables, fields, log})
export const useFeedbackMutation = (variables: { firstName: string, lastName: string, email: string, message: string, subject: string }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{feedback: boolean}, any>> => gqlMutation<{feedback: boolean}>('feedback', {variables: variables, fields, log})
export const useDeleteFileMutation = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteFile: FileInfo}, any>> => gqlMutation<{deleteFile: FileInfo}>('deleteFile', {variables: variables, fields, log})
export const useUploadFileMutation = (variables: { file: Upload }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<UseMutationReturn<{uploadFile: FileInfo}, any>> => gqlMutation<{uploadFile: FileInfo}>('uploadFile', {variables: variables, fields, log})
export const useUploadFilesMutation = (variables: { files: Upload[] }, fields?: InputFields<boolean>[] | null, log?: boolean): Promise<UseMutationReturn<{uploadFiles: boolean}, any>> => gqlMutation<{uploadFiles: boolean}>('uploadFiles', {variables: variables, fields, log})
export const useCreateEventMutation = (variables: { input: EventCreateInput }, fields?: InputFields<Event>[] | null, log?: boolean): Promise<UseMutationReturn<{createEvent: Event}, any>> => gqlMutation<{createEvent: Event}>('createEvent', {variables: variables, fields, log})
export const useDeleteEventMutation = (variables: { id: string }, fields?: InputFields<Event>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteEvent: Event}, any>> => gqlMutation<{deleteEvent: Event}>('deleteEvent', {variables: variables, fields, log})
export const useUpdateEventMutation = (variables: { id: string, input: EventInput }, fields?: InputFields<Event>[] | null, log?: boolean): Promise<UseMutationReturn<{updateEvent: Event}, any>> => gqlMutation<{updateEvent: Event}>('updateEvent', {variables: variables, fields, log})
export const useCreateFaqMutation = (variables: { input: FaqCreateInput }, fields?: InputFields<Faq>[] | null, log?: boolean): Promise<UseMutationReturn<{createFaq: Faq}, any>> => gqlMutation<{createFaq: Faq}>('createFaq', {variables: variables, fields, log})
export const useDeleteFaqMutation = (variables: { id: string }, fields?: InputFields<Faq>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteFaq: Faq}, any>> => gqlMutation<{deleteFaq: Faq}>('deleteFaq', {variables: variables, fields, log})
export const useUpdateFaqMutation = (variables: { id: string, input: FaqInput }, fields?: InputFields<Faq>[] | null, log?: boolean): Promise<UseMutationReturn<{updateFaq: Faq}, any>> => gqlMutation<{updateFaq: Faq}>('updateFaq', {variables: variables, fields, log})
export const useCreateSkillMutation = (variables: { input: SkillCreateInput }, fields?: InputFields<Skill>[] | null, log?: boolean): Promise<UseMutationReturn<{createSkill: Skill}, any>> => gqlMutation<{createSkill: Skill}>('createSkill', {variables: variables, fields, log})
export const useDeleteSkillMutation = (variables: { id: string }, fields?: InputFields<Skill>[] | null, log?: boolean): Promise<UseMutationReturn<{deleteSkill: Skill}, any>> => gqlMutation<{deleteSkill: Skill}>('deleteSkill', {variables: variables, fields, log})
export const useUpdateSkillMutation = (variables: { id: string, input: SkillInput }, fields?: InputFields<Skill>[] | null, log?: boolean): Promise<UseMutationReturn<{updateSkill: Skill}, any>> => gqlMutation<{updateSkill: Skill}>('updateSkill', {variables: variables, fields, log})
export const useUserCreatedSubscription = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{userCreated: User}, any>> => gqlSubscription<{userCreated: User}>('userCreated', { fields, log})
export const useEventCreatedSubscription = ( fields?: InputFields<Event>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{eventCreated: Event}, any>> => gqlSubscription<{eventCreated: Event}>('eventCreated', { fields, log})
export const useFaqCreatedSubscription = ( fields?: InputFields<Faq>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{faqCreated: Faq}, any>> => gqlSubscription<{faqCreated: Faq}>('faqCreated', { fields, log})
export const useSkillCreatedSubscription = ( fields?: InputFields<Skill>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{skillCreated: Skill}, any>> => gqlSubscription<{skillCreated: Skill}>('skillCreated', { fields, log})