import type {CoreHealthCheckResult, FindAndCountUsersResult, SortInput, FilterInput, User, Meta, FileInfo, FindAndCountTodosResult, Todo, CoreAuthModel, Auth, AuthSignInInput, AuthSignUpInput, UserCreateInput, UserInput, TodoCreateInput, TodoInput} from "./default"
import type { InputFields } from '#base-types/fields';
import { gqlQuery, gqlAsyncQuery, gqlMutation, gqlSubscription, type ReturnTypeOfSubscription } from '#imports';
import type { AsyncData, AsyncDataOptions } from 'nuxt/app';

export const useHealthCheckQuery = ( fields?: InputFields<CoreHealthCheckResult>[] | null, log?: boolean): Promise<{data: CoreHealthCheckResult; error: Error | null}> => gqlQuery<CoreHealthCheckResult>('healthCheck', { fields, log})
export const useAsyncHealthCheckQuery = ( fields?: InputFields<CoreHealthCheckResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<CoreHealthCheckResult, Error>> => gqlAsyncQuery<CoreHealthCheckResult>('healthCheck', { fields, asyncDataOptions, log})
export const useFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, log?: boolean): Promise<{data: FindAndCountUsersResult; error: Error | null}> => gqlQuery<FindAndCountUsersResult>('findAndCountUsers', {variables, fields, log})
export const useAsyncFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountUsersResult, Error>> => gqlAsyncQuery<FindAndCountUsersResult>('findAndCountUsers', {variables, fields, asyncDataOptions, log})
export const useFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User[]; error: Error | null}> => gqlQuery<User[]>('findUsers', {variables, fields, log})
export const useAsyncFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<User[], Error>> => gqlAsyncQuery<User[]>('findUsers', {variables, fields, asyncDataOptions, log})
export const useGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: Error | null}> => gqlQuery<User>('getUser', {variables, fields, log})
export const useAsyncGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<User, Error>> => gqlAsyncQuery<User>('getUser', {variables, fields, asyncDataOptions, log})
export const useGetVerifiedStateQuery = (variables: { token: string },  log?: boolean): Promise<{data: boolean; error: Error | null}> => gqlQuery<boolean>('getVerifiedState', {variables, fields: null, log})
export const useAsyncGetVerifiedStateQuery = (variables: { token: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<boolean, Error>> => gqlAsyncQuery<boolean>('getVerifiedState', {variables, fields: null, asyncDataOptions, log})
export const useRequestPasswordResetMailQuery = (variables: { email: string },  log?: boolean): Promise<{data: boolean; error: Error | null}> => gqlQuery<boolean>('requestPasswordResetMail', {variables, fields: null, log})
export const useAsyncRequestPasswordResetMailQuery = (variables: { email: string },  log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<boolean, Error>> => gqlAsyncQuery<boolean>('requestPasswordResetMail', {variables, fields: null, asyncDataOptions, log})
export const useGetMetaQuery = ( fields?: InputFields<Meta>[] | null, log?: boolean): Promise<{data: Meta; error: Error | null}> => gqlQuery<Meta>('getMeta', { fields, log})
export const useAsyncGetMetaQuery = ( fields?: InputFields<Meta>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Meta, Error>> => gqlAsyncQuery<Meta>('getMeta', { fields, asyncDataOptions, log})
export const useGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: Error | null}> => gqlQuery<FileInfo>('getFileInfo', {variables, fields, log})
export const useAsyncGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FileInfo, Error>> => gqlAsyncQuery<FileInfo>('getFileInfo', {variables, fields, asyncDataOptions, log})
export const useFindAndCountTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTodosResult>[] | null, log?: boolean): Promise<{data: FindAndCountTodosResult; error: Error | null}> => gqlQuery<FindAndCountTodosResult>('findAndCountTodos', {variables, fields, log})
export const useAsyncFindAndCountTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTodosResult>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<FindAndCountTodosResult, Error>> => gqlAsyncQuery<FindAndCountTodosResult>('findAndCountTodos', {variables, fields, asyncDataOptions, log})
export const useFindTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<{data: Todo[]; error: Error | null}> => gqlQuery<Todo[]>('findTodos', {variables, fields, log})
export const useAsyncFindTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Todo>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Todo[], Error>> => gqlAsyncQuery<Todo[]>('findTodos', {variables, fields, asyncDataOptions, log})
export const useGetTodoQuery = (variables: { id: string }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<{data: Todo; error: Error | null}> => gqlQuery<Todo>('getTodo', {variables, fields, log})
export const useAsyncGetTodoQuery = (variables: { id: string }, fields?: InputFields<Todo>[] | null, log?: boolean, asyncDataOptions?: AsyncDataOptions): Promise<AsyncData<Todo, Error>> => gqlAsyncQuery<Todo>('getTodo', {variables, fields, asyncDataOptions, log})
export const useLogoutMutation = (variables: { allDevices?: boolean },  log?: boolean): Promise<{data: boolean; error: Error}> => gqlMutation<boolean>('logout', {variables, fields: null, log})
export const useRefreshTokenMutation = ( fields?: InputFields<CoreAuthModel>[] | null, log?: boolean): Promise<{data: CoreAuthModel; error: Error}> => gqlMutation<CoreAuthModel>('refreshToken', { fields, log})
export const useSignInMutation = (variables: { input: AuthSignInInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<{data: Auth; error: Error}> => gqlMutation<Auth>('signIn', {variables, fields, log})
export const useSignUpMutation = (variables: { input: AuthSignUpInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<{data: Auth; error: Error}> => gqlMutation<Auth>('signUp', {variables, fields, log})
export const useCreateUserMutation = (variables: { input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: Error}> => gqlMutation<User>('createUser', {variables, fields, log})
export const useDeleteUserMutation = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: Error}> => gqlMutation<User>('deleteUser', {variables, fields, log})
export const useResetPasswordMutation = (variables: { token: string, password: string },  log?: boolean): Promise<{data: boolean; error: Error}> => gqlMutation<boolean>('resetPassword', {variables, fields: null, log})
export const useUpdateUserMutation = (variables: { input: UserInput, id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<{data: User; error: Error}> => gqlMutation<User>('updateUser', {variables, fields, log})
export const useVerifyUserMutation = (variables: { token: string },  log?: boolean): Promise<{data: boolean; error: Error}> => gqlMutation<boolean>('verifyUser', {variables, fields: null, log})
export const useDeleteFileMutation = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: Error}> => gqlMutation<FileInfo>('deleteFile', {variables, fields, log})
export const useUploadFileMutation = (variables: { file: any }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<{data: FileInfo; error: Error}> => gqlMutation<FileInfo>('uploadFile', {variables, fields, log})
export const useUploadFilesMutation = (variables: { files: any[] },  log?: boolean): Promise<{data: boolean; error: Error}> => gqlMutation<boolean>('uploadFiles', {variables, fields: null, log})
export const useCreateTodoMutation = (variables: { input: TodoCreateInput }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<{data: Todo; error: Error}> => gqlMutation<Todo>('createTodo', {variables, fields, log})
export const useDeleteTodoMutation = (variables: { id: string }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<{data: Todo; error: Error}> => gqlMutation<Todo>('deleteTodo', {variables, fields, log})
export const useUpdateTodoMutation = (variables: { id: string, input: TodoInput }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<{data: Todo; error: Error}> => gqlMutation<Todo>('updateTodo', {variables, fields, log})
export const useUserCreatedSubscription = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<User>> => gqlSubscription<User>('userCreated', { fields, log})
export const useTodoCreatedSubscription = ( fields?: InputFields<Todo>[] | null, log?: boolean): Promise<ReturnTypeOfSubscription<Todo>> => gqlSubscription<Todo>('todoCreated', { fields, log})