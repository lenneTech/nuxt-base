import type {CoreHealthCheckResult, FindAndCountUsersResult, SortInput, FilterInput, User, Meta, FileInfo, FindAndCountTodosResult, Todo, CoreAuthModel, Auth, AuthSignInInput, AuthSignUpInput, UserCreateInput, UserInput, TodoCreateInput, TodoInput} from "./default"
import type { InputFields } from '#base-types/fields';

import { gqlQuery, gqlMutation, gqlSubscription } from '#imports';

import type { UseMutationReturn, UseSubscriptionReturn } from '@vue/apollo-composable';

import type { AsyncData } from 'nuxt/app';
export const useHealthCheckQuery = ( fields?: InputFields<CoreHealthCheckResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{healthCheck: CoreHealthCheckResult}, Error>> => gqlQuery<{healthCheck: CoreHealthCheckResult}>('healthCheck', { fields, lazy, log})
export const useFindAndCountUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountUsersResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountUsers: FindAndCountUsersResult}, Error>> => gqlQuery<{findAndCountUsers: FindAndCountUsersResult}>('findAndCountUsers', {variables, fields, lazy, log})
export const useFindUsersQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<User>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findUsers: User[]}, Error>> => gqlQuery<{findUsers: User[]}>('findUsers', {variables, fields, lazy, log})
export const useGetUserQuery = (variables: { id: string }, fields?: InputFields<User>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getUser: User}, Error>> => gqlQuery<{getUser: User}>('getUser', {variables, fields, lazy, log})
export const useGetVerifiedStateQuery = (variables: { token: string },  lazy?: boolean, log?: boolean): Promise<AsyncData<{getVerifiedState: boolean}, Error>> => gqlQuery<{getVerifiedState: boolean}>('getVerifiedState', {variables, fields: null, lazy, log})
export const useRequestPasswordResetMailQuery = (variables: { email: string },  lazy?: boolean, log?: boolean): Promise<AsyncData<{requestPasswordResetMail: boolean}, Error>> => gqlQuery<{requestPasswordResetMail: boolean}>('requestPasswordResetMail', {variables, fields: null, lazy, log})
export const useGetMetaQuery = ( fields?: InputFields<Meta>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getMeta: Meta}, Error>> => gqlQuery<{getMeta: Meta}>('getMeta', { fields, lazy, log})
export const useGetFileInfoQuery = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getFileInfo: FileInfo}, Error>> => gqlQuery<{getFileInfo: FileInfo}>('getFileInfo', {variables, fields, lazy, log})
export const useFindAndCountTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<FindAndCountTodosResult>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findAndCountTodos: FindAndCountTodosResult}, Error>> => gqlQuery<{findAndCountTodos: FindAndCountTodosResult}>('findAndCountTodos', {variables, fields, lazy, log})
export const useFindTodosQuery = (variables: { limit?: number, offset?: number, skip?: number, sort?: SortInput[], take?: number, filter?: FilterInput, samples?: number }, fields?: InputFields<Todo>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{findTodos: Todo[]}, Error>> => gqlQuery<{findTodos: Todo[]}>('findTodos', {variables, fields, lazy, log})
export const useGetTodoQuery = (variables: { id: string }, fields?: InputFields<Todo>[] | null, lazy?: boolean, log?: boolean): Promise<AsyncData<{getTodo: Todo}, Error>> => gqlQuery<{getTodo: Todo}>('getTodo', {variables, fields, lazy, log})
export const useLogoutMutation = (variables: { allDevices?: boolean },  log?: boolean): Promise<AsyncData<{logout: boolean}, Error>> => gqlMutation<{logout: boolean}>('logout', {variables, fields: null, log})
export const useRefreshTokenMutation = ( fields?: InputFields<CoreAuthModel>[] | null, log?: boolean): Promise<AsyncData<{refreshToken: CoreAuthModel}, Error>> => gqlMutation<{refreshToken: CoreAuthModel}>('refreshToken', { fields, log})
export const useSignInMutation = (variables: { input: AuthSignInInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<AsyncData<{signIn: Auth}, Error>> => gqlMutation<{signIn: Auth}>('signIn', {variables, fields, log})
export const useSignUpMutation = (variables: { input: AuthSignUpInput }, fields?: InputFields<Auth>[] | null, log?: boolean): Promise<AsyncData<{signUp: Auth}, Error>> => gqlMutation<{signUp: Auth}>('signUp', {variables, fields, log})
export const useCreateUserMutation = (variables: { input: UserCreateInput }, fields?: InputFields<User>[] | null, log?: boolean): Promise<AsyncData<{createUser: User}, Error>> => gqlMutation<{createUser: User}>('createUser', {variables, fields, log})
export const useDeleteUserMutation = (variables: { id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<AsyncData<{deleteUser: User}, Error>> => gqlMutation<{deleteUser: User}>('deleteUser', {variables, fields, log})
export const useResetPasswordMutation = (variables: { token: string, password: string },  log?: boolean): Promise<AsyncData<{resetPassword: boolean}, Error>> => gqlMutation<{resetPassword: boolean}>('resetPassword', {variables, fields: null, log})
export const useUpdateUserMutation = (variables: { input: UserInput, id: string }, fields?: InputFields<User>[] | null, log?: boolean): Promise<AsyncData<{updateUser: User}, Error>> => gqlMutation<{updateUser: User}>('updateUser', {variables, fields, log})
export const useVerifyUserMutation = (variables: { token: string },  log?: boolean): Promise<AsyncData<{verifyUser: boolean}, Error>> => gqlMutation<{verifyUser: boolean}>('verifyUser', {variables, fields: null, log})
export const useDeleteFileMutation = (variables: { filename: string }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<AsyncData<{deleteFile: FileInfo}, Error>> => gqlMutation<{deleteFile: FileInfo}>('deleteFile', {variables, fields, log})
export const useUploadFileMutation = (variables: { file: any }, fields?: InputFields<FileInfo>[] | null, log?: boolean): Promise<AsyncData<{uploadFile: FileInfo}, Error>> => gqlMutation<{uploadFile: FileInfo}>('uploadFile', {variables, fields, log})
export const useUploadFilesMutation = (variables: { files: any[] },  log?: boolean): Promise<AsyncData<{uploadFiles: boolean}, Error>> => gqlMutation<{uploadFiles: boolean}>('uploadFiles', {variables, fields: null, log})
export const useCreateTodoMutation = (variables: { input: TodoCreateInput }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<AsyncData<{createTodo: Todo}, Error>> => gqlMutation<{createTodo: Todo}>('createTodo', {variables, fields, log})
export const useDeleteTodoMutation = (variables: { id: string }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<AsyncData<{deleteTodo: Todo}, Error>> => gqlMutation<{deleteTodo: Todo}>('deleteTodo', {variables, fields, log})
export const useUpdateTodoMutation = (variables: { id: string, input: TodoInput }, fields?: InputFields<Todo>[] | null, log?: boolean): Promise<AsyncData<{updateTodo: Todo}, Error>> => gqlMutation<{updateTodo: Todo}>('updateTodo', {variables, fields, log})
export const useUserCreatedSubscription = ( fields?: InputFields<User>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{userCreated: User}, any>> => gqlSubscription<{userCreated: User}>('userCreated', { fields, log})
export const useTodoCreatedSubscription = ( fields?: InputFields<Todo>[] | null, log?: boolean): Promise<UseSubscriptionReturn<{todoCreated: Todo}, any>> => gqlSubscription<{todoCreated: Todo}>('todoCreated', { fields, log})